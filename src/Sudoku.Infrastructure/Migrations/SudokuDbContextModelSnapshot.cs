// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Sudoku.Infrastructure.Data;

#nullable disable

namespace Sudoku.Infrastructure.Migrations
{
    [DbContext(typeof(SudokuDbContext))]
    partial class SudokuDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Sudoku.Core.Entities.GameSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.PrimitiveCollection<int[]>("CurrentState")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("current_state");

                    b.Property<DateTime>("LastSavedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_saved_at");

                    b.Property<Guid>("PuzzleId")
                        .HasColumnType("uuid")
                        .HasColumnName("puzzle_id");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("PuzzleId");

                    b.HasIndex("UserId");

                    b.ToTable("game_sessions", (string)null);
                });

            modelBuilder.Entity("Sudoku.Core.Entities.SudokuPuzzle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("difficulty");

                    b.Property<DateTime>("GeneratedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("generated_at");

                    b.PrimitiveCollection<int[]>("InitialCells")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("initial_cells");

                    b.PrimitiveCollection<int[]>("Solution")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("solution");

                    b.HasKey("Id");

                    b.HasIndex("Difficulty");

                    b.ToTable("sudoku_puzzles", (string)null);
                });

            modelBuilder.Entity("Sudoku.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("display_name");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Sudoku.Core.Entities.GameSession", b =>
                {
                    b.HasOne("Sudoku.Core.Entities.SudokuPuzzle", "Puzzle")
                        .WithMany("GameSessions")
                        .HasForeignKey("PuzzleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sudoku.Core.Entities.User", "User")
                        .WithMany("GameSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Puzzle");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sudoku.Core.Entities.SudokuPuzzle", b =>
                {
                    b.Navigation("GameSessions");
                });

            modelBuilder.Entity("Sudoku.Core.Entities.User", b =>
                {
                    b.Navigation("GameSessions");
                });
#pragma warning restore 612, 618
        }
    }
}
