@page "/puzzle/{SessionId:guid}"
@inject ApiService ApiService
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@attribute [Authorize]

<MudContainer MaxWidth="MaxWidth.Large">
    @if (isLoading)
    {
        <MudProgressCircular Indeterminate="true" />
        <MudText>Loading puzzle...</MudText>
    }
    else if (session == null || puzzleData == null)
    {
        <MudAlert Severity="Severity.Error">Failed to load puzzle session</MudAlert>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="/dashboard">
            Back to Dashboard
        </MudButton>
    }
    else
    {
        <MudGrid>
            <!-- Puzzle Board -->
            <MudItem xs="12" md="8">
                <MudPaper Elevation="3" Class="pa-4">
                    <MudText Typo="Typo.h4" Class="mb-4">
                        Sudoku Puzzle - @puzzleData.Difficulty
                    </MudText>
                    
                    <!-- Sudoku Grid -->
                    <div class="sudoku-grid">
                        @for (int row = 0; row < 9; row++)
                        {
                            @for (int col = 0; col < 9; col++)
                            {
                                var index = row * 9 + col;
                                var currentIndex = index;
                                var isInitial = puzzleData.InitialCells[index] != 0;
                                var value = currentBoard[index];
                                
                                <div class="sudoku-cell @GetCellClass(row, col, currentIndex == selectedCell)"
                                     @onclick="@(() => SelectCell(currentIndex))">
                                    @if (value != 0)
                                    {
                                        <span class="@(isInitial ? "initial-value" : "user-value")">@value</span>
                                    }
                                </div>
                            }
                        }
                    </div>

                    <!-- Number Pad -->
                    <MudPaper Elevation="1" Class="pa-3 mt-4">
                        <MudText Typo="Typo.h6" Class="mb-2">Select Number</MudText>
                        <MudStack Row="true" Spacing="2" Justify="Justify.Center">
                            @for (int num = 1; num <= 9; num++)
                            {
                                var number = num;
                                <MudButton Variant="Variant.Filled" 
                                           Color="Color.Primary"
                                           Size="Size.Large"
                                           OnClick="@(() => SetCellValue(number))"
                                           Style="min-width: 50px;">
                                    @number
                                </MudButton>
                            }
                            <MudButton Variant="Variant.Outlined" 
                                       Color="Color.Secondary"
                                       Size="Size.Large"
                                       OnClick="@(() => SetCellValue(0))"
                                       Style="min-width: 50px;">
                                Clear
                            </MudButton>
                        </MudStack>
                    </MudPaper>
                </MudPaper>
            </MudItem>

            <!-- Controls Panel -->
            <MudItem xs="12" md="4">
                <MudPaper Elevation="3" Class="pa-4">
                    <MudText Typo="Typo.h5" Class="mb-4">Game Controls</MudText>
                    
                    <MudStack Spacing="3">
                        <MudButton Variant="Variant.Filled" 
                                   Color="Color.Success" 
                                   FullWidth="true"
                                   OnClick="SaveProgress"
                                   Disabled="isSaving"
                                   StartIcon="@Icons.Material.Filled.Save">
                            @if (isSaving)
                            {
                                <span>Saving...</span>
                            }
                            else
                            {
                                <span>Save Progress</span>
                            }
                        </MudButton>

                        <MudButton Variant="Variant.Outlined" 
                                   Color="Color.Info" 
                                   FullWidth="true"
                                   OnClick="CheckSolution"
                                   StartIcon="@Icons.Material.Filled.CheckCircle">
                            Check Solution
                        </MudButton>

                        <MudButton Variant="Variant.Outlined" 
                                   Color="Color.Warning" 
                                   FullWidth="true"
                                   Href="/dashboard"
                                   StartIcon="@Icons.Material.Filled.ExitToApp">
                            Back to Dashboard
                        </MudButton>
                    </MudStack>

                    <MudDivider Class="my-4" />

                    <MudText Typo="Typo.h6" Class="mb-2">Session Info</MudText>
                    <MudText Typo="Typo.body2">
                        <strong>Started:</strong> @session.StartedAt.ToLocalTime().ToString("g")
                    </MudText>
                    <MudText Typo="Typo.body2">
                        <strong>Last Saved:</strong> @session.LastSavedAt.ToLocalTime().ToString("g")
                    </MudText>
                    <MudText Typo="Typo.body2">
                        <strong>Status:</strong> @session.Status
                    </MudText>
                </MudPaper>
            </MudItem>
        </MudGrid>
    }
</MudContainer>

<style>
    .sudoku-grid {
        display: grid;
        grid-template-columns: repeat(9, 1fr);
        gap: 0;
        border: 3px solid #333;
        width: fit-content;
        margin: 0 auto;
    }

    .sudoku-cell {
        width: 60px;
        height: 60px;
        display: flex;
        align-items: center;
        justify-content: center;
        border: 1px solid #ccc;
        cursor: pointer;
        font-size: 24px;
        font-weight: bold;
        background-color: white;
        transition: background-color 0.2s;
    }

    .sudoku-cell:hover {
        background-color: #f0f0f0;
    }

    .sudoku-cell.selected {
        background-color: #bbdefb !important;
    }

    .sudoku-cell.initial-value {
        background-color: #e3f2fd;
    }

    .sudoku-cell:nth-child(3n) {
        border-right: 2px solid #333;
    }

    .sudoku-cell:nth-child(n+19):nth-child(-n+27),
    .sudoku-cell:nth-child(n+46):nth-child(-n+54) {
        border-bottom: 2px solid #333;
    }

    .initial-value {
        color: #000;
    }

    .user-value {
        color: #1976d2;
    }

    @@media (max-width: 768px) {
        .sudoku-cell {
            width: 40px;
            height: 40px;
            font-size: 18px;
        }
    }
</style>

@code {
    [Parameter]
    public Guid SessionId { get; set; }

    private GameSession? session;
    private Models.Puzzle? puzzleData;
    private int[] currentBoard = new int[81];
    private int selectedCell = -1;
    private bool isLoading = true;
    private bool isSaving = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadSession();
    }

    private async Task LoadSession()
    {
        isLoading = true;

        try
        {
            session = await ApiService.GetSessionAsync(SessionId);
            
            if (session == null)
            {
                Snackbar.Add("Session not found", Severity.Error);
                return;
            }

            puzzleData = await ApiService.GetPuzzleAsync(session.PuzzleId);
            
            if (puzzleData == null)
            {
                Snackbar.Add("Puzzle not found", Severity.Error);
                return;
            }

            // Initialize board with current state
            currentBoard = (int[])session.CurrentState.Clone();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading session: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void SelectCell(int index)
    {
        // Don't allow selecting initial cells
        if (puzzleData != null && puzzleData.InitialCells[index] == 0)
        {
            selectedCell = index;
        }
    }

    private void SetCellValue(int value)
    {
        if (selectedCell >= 0 && selectedCell < 81)
        {
            if (puzzleData != null && puzzleData.InitialCells[selectedCell] == 0)
            {
                currentBoard[selectedCell] = value;
                StateHasChanged();
            }
        }
    }

    private string GetCellClass(int row, int col, bool selected)
    {
        var classes = new List<string>();
        
        if (selected)
            classes.Add("selected");

        var index = row * 9 + col;
        if (puzzleData != null && puzzleData.InitialCells[index] != 0)
            classes.Add("initial-value");

        return string.Join(" ", classes);
    }

    private async Task SaveProgress()
    {
        if (session == null) return;

        isSaving = true;

        try
        {
            var updatedSession = await ApiService.UpdateSessionAsync(session.Id, currentBoard);
            
            if (updatedSession != null)
            {
                session = updatedSession;
                Snackbar.Add("Progress saved successfully!", Severity.Success);
            }
            else
            {
                Snackbar.Add("Failed to save progress", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error saving: {ex.Message}", Severity.Error);
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task CheckSolution()
    {
        // Simple completion check - all cells filled
        if (currentBoard.All(c => c != 0))
        {
            var result = await ApiService.CompleteSessionAsync(SessionId);
            
            if (result != null)
            {
                Snackbar.Add("Congratulations! Puzzle completed!", Severity.Success);
                Navigation.NavigateTo("/dashboard");
            }
            else
            {
                Snackbar.Add("Puzzle solution is incorrect. Keep trying!", Severity.Warning);
            }
        }
        else
        {
            Snackbar.Add("Please fill in all cells before checking", Severity.Info);
        }
    }
}
